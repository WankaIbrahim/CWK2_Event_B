machine DentistAppointmentSystem
sees DentistAppointmentSystemContext
variables
	patient 
	admins
	dentist
	treatment
	requiredTreatmentRecord
	recievedTreatmentRecord
	appointment
	dateAndTime
	appointmentSlot
	userDetails
	passwords
	loggedIn
	loggedOut
invariants
	@inv1: patient ⊆ USER
	@inv2: admins ⊆ USER
	@inv3: dentist ⊆ USER
	@inv4: patient ∩ dentist = ∅
	@inv5: patient ∩ admins = ∅
	@inv6: dentist ∩ admins = ∅
	@inv7: patient ∩ admins ∩ dentist = ∅

	@inv8 treatment ⊆ TREATMENT	
	@inv9: requiredTreatmentRecord ∈ patient ↔ treatment
	@inv10: recievedTreatmentRecord ∈ patient ↔ treatment
	@inv11: requiredTreatmentRecord ∩ recievedTreatmentRecord = ∅

	@inv12: dateAndTime ⊆ DATEANDTIME
	@inv13: appointmentSlot ∈ dentist ↔ dateAndTime
	@inv14: appointment ∈ appointmentSlot ⇸ requiredTreatmentRecord

	@inv15: passwords ⊆ STRINGS
	@inv16: userDetails ∈ USER ↠ passwords
	@inv17: loggedIn ⊆ USER
	@inv18: loggedOut ⊆ USER
events
event INITIALISATION
then
	@act1:patient ≔ ∅
	@act2:admins ≔ ∅
	@act3:dentist ≔ ∅
	@act4:treatment ≔ ∅
	@act5:requiredTreatmentRecord ≔ ∅
	@act6:recievedTreatmentRecord ≔ ∅
	@act7:appointment ≔ ∅
	@act8:dateAndTime ≔ ∅
	@act9:appointmentSlot ≔ ∅
	@act10:userDetails ≔ ∅ 
	@act11:loggedIn ≔ ∅
	@act12:passwords ≔ ∅
	@act13:loggedOut ≔ USER
end

event REGISTER_ADMINISTRATOR
any u p // new administrator username, password
where
    @grd1: u ∉ admins // check unique username
    @grd2: u ∉ dentist // check not already a dentist 
    @grd3: u ∉ patient //check not already a patient
    @grd4: p ∈ STRINGS // check the password is valid
    @grd5: "root" ∈ loggedIn // ensure that the root administrator is logged in
then
    @act1: admins ≔ admins ∪ {u} // add the new administrator to the set of administrators
    @act2: userDetails(u) ≔ p // set the password for the new administrator
end

event REGISTER_DENTIST
any u p // new dentist username, password
where
    @grd1: u ∉ admins // check already not administrator
    @grd2: u ∉ dentist // check unique username
    @grd3: u ∉ patient // check already not a patient
    @grd4: p ∈ STRINGS // ensure the password is valid
    @grd5: "root" ∈ loggedIn // ensure that the root administrator is logged in
then
    @act1: dentist ≔ dentist ∪ {u} // add the new dentist to the set of dentists
    @act2: userDetails(u) ≔ p // set the password for the new dentist
end

event REGISTER_PATIENT
any u p nhs // new patient username, password, NHS number
where
    @grd1: u ∉ admins // check already not administrator
    @grd2: u ∉ dentist // check already not a dentist
    @grd3: u ∉ patient // check the unique username as a patient
    @grd4: p ∈ STRINGS // ensure the password is valid
    @grd5: nhs ∉ {record.nhs_number | record ∈ patient} // ensure the NHS number is unique
then
    @act1: patient ≔ patient ∪ {u} // add the new patient to the set of patients
    @act2: userDetails(u) ≔ p // set the password for the new patient
    @act3: userDetails(u) ≔ nhs // set the NHS number for the new patient
end

event CHANGEPASSWORD
any u p //user, new password
where
	@grd1: u ∈ USER
	@grd2: u ∈ loggedIn //user has to be logged in to change their password
	@grd3: p ∈ STRINGS
then
	//@act1: userDetails ≔ {u} ⩤ userDetails //removing that user's previous details
	//@act2: userDetails ≔ userDetails ∪ {u ↦ p} //re-adding that user's details with their new password
	@act1: userDetails(u) ≔ p //changing user's password
end

event USERLOGIN
any u p //user, user's password
where
	@grd1: u ∈ USER 
	@grd2: p = userDetails(u) //user's details have to be correct, i.e. they enter existing username and password
	@grd3: u ∈ loggedOut //user has to be logged out to be logged in
	@grd4: p ∈ STRINGS
then
	@act1: loggedIn ≔ loggedIn ∪ {u} //logging user in
	@act2: loggedOut ≔ loggedOut ∖ {u} //user no-longer logged out so remove from loggedOut set
end

event userLogout
any u  //user
where
	@grd1: u ∈ USER
	@grd2: u ∈ loggedIn //user needs to be logged in to be logged out
then
	@act1: loggedOut ≔ loggedOut ∪ {u} //user is now logged out
	@act2: loggedIn ≔ loggedIn ∖ {u} //user logged out so no longer part of set loggedIn
end 
end
